{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\nimport { returnErrors } from \"./errorActions\"; // Check token & load user\n\nexport const loadUser = token => dispatch => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.post(\"/users\", {}, tokenConfig(token)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n      token: token\n    });\n  }).catch(err => {});\n};\nexport const register = items => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request body\n  //always check it out\n\n  const body = JSON.stringify(items);\n  axios.post(\"/users/register\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    if (err) dispatch(returnErrors(err.response.data));\n  });\n}; // Login User\n\nexport const login = payload => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify(payload);\n  axios.post(\"/users/login\", body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    if (err) dispatch(returnErrors(err.response.data));\n  });\n}; // Logout User\n\nexport const logout = type => {\n  console.log(\"action\");\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // Setup config/headers and token\n\nexport const tokenConfig = token => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":null,"metadata":{},"sourceType":"module"}