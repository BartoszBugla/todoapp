{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport App from \"next/app\";\nimport { Provider } from \"react-redux\";\nimport React from \"react\";\nimport store from \"../redux/store\";\nimport withRedux from \"next-redux-wrapper\";\nimport cookies from \"next-cookies\";\nimport \"../styles.css\";\nimport UserProvider from \"../components/userProvider\";\n\nvar MyApp = function MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps,\n      store = _ref.store,\n      token = _ref.token;\n\n  MyApp.getInitialProps = function _callee(_ref2) {\n    var Component, ctx, pageProps, token;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Component = _ref2.Component, ctx = _ref2.ctx;\n\n            if (!Component.getInitialProps) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Component.getInitialProps(ctx));\n\n          case 4:\n            _context.t0 = _context.sent;\n            _context.next = 8;\n            break;\n\n          case 7:\n            _context.t0 = {};\n\n          case 8:\n            pageProps = _context.t0;\n            token = cookies(ctx).token || \"\";\n            console.log(\"anything\"); //Anything returned here can be access by the client\n\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps,\n              token: token\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(UserProvider, {\n    token: token\n  }, __jsx(Component, pageProps)));\n}; //makeStore function that returns a new store for every request\n\n\nvar makeStore = function makeStore() {\n  return store;\n}; //withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(makeStore)(MyApp);","map":null,"metadata":{},"sourceType":"module"}