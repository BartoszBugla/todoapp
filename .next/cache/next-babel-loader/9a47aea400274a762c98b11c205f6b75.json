{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\nimport { returnErrors } from \"./errorActions\"; // Check token & load user\n\nexport var loadUser = function loadUser(token) {\n  return function (dispatch) {\n    // User loading\n    dispatch({\n      type: USER_LOADING\n    });\n    axios.post(\"/users\", {}, tokenConfig(token)).then(function (res) {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data,\n        token: token\n      });\n    })[\"catch\"](function (err) {});\n  };\n};\nexport var register = function register(items) {\n  return function (dispatch) {\n    // Headers\n    var config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }; // Request body\n    //always check it out\n\n    var body = JSON.stringify(items);\n    axios.post(\"/users/register\", body, config).then(function (res) {\n      return dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    })[\"catch\"](function (err) {\n      dispatch({\n        type: REGISTER_FAIL\n      });\n      if (err) dispatch(returnErrors(err.response.data));\n    });\n  };\n}; // Login User\n\nexport var login = function login(payload) {\n  return function (dispatch) {\n    // Headers\n    var config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }; // Request body\n\n    var body = JSON.stringify(payload);\n    axios.post(\"/users/login\", body, config).then(function (res) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    })[\"catch\"](function (err) {\n      console.log(err);\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      if (err) dispatch(returnErrors(err.response.data));\n    });\n  };\n}; // Logout User\n\nexport var logout = function logout(type) {\n  console.log(\"action\");\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // Setup config/headers and token\n\nexport var tokenConfig = function tokenConfig(token) {\n  // Headers\n  var config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":null,"metadata":{},"sourceType":"module"}