{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\nimport { returnErrors } from \"./errorActions\"; // Check token & load user\n\nexport const loadUser = token => dispatch => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.post(\"http://localhost:5000/users\", {}, tokenConfig(token)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n      token: token\n    });\n  }).catch(err => {});\n};\nexport const register = items => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request body\n  //always check it out\n\n  const body = JSON.stringify(items);\n  axios.post(\"http://localhost:5000/users/register\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    if (err) dispatch(returnErrors(err.response.data));\n  });\n}; // Login User\n\nexport const login = payload => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify(payload);\n  axios.post(\"http://localhost:5000/users/login\", body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    if (err) dispatch(returnErrors(err.response.data));\n  });\n}; // Logout User\n\nexport const logout = type => {\n  console.log(\"action\");\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // Setup config/headers and token\n\nexport const tokenConfig = token => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/Bartosz/Desktop/TodoApp/redux/actions/authActions.js"],"names":["axios","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","returnErrors","loadUser","token","dispatch","type","post","tokenConfig","then","res","payload","data","catch","err","register","items","config","headers","body","JSON","stringify","response","login","clearErrors","console","log","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nimport {\r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n} from \"./types\";\r\nimport { returnErrors } from \"./errorActions\";\r\n// Check token & load user\r\nexport const loadUser = (token) => (dispatch) => {\r\n    // User loading\r\n\r\n    dispatch({ type: USER_LOADING });\r\n    axios\r\n        .post(\"http://localhost:5000/users\", {}, tokenConfig(token))\r\n        .then((res) => {\r\n            dispatch({\r\n                type: USER_LOADED,\r\n                payload: res.data,\r\n                token: token,\r\n            });\r\n        })\r\n        .catch((err) => {});\r\n};\r\nexport const register = (items) => (dispatch) => {\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    };\r\n    // Request body\r\n    //always check it out\r\n    const body = JSON.stringify(items);\r\n\r\n    axios\r\n        .post(\"http://localhost:5000/users/register\", body, config)\r\n        .then((res) =>\r\n            dispatch({\r\n                type: REGISTER_SUCCESS,\r\n                payload: res.data,\r\n            })\r\n        )\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: REGISTER_FAIL,\r\n            });\r\n            if (err) dispatch(returnErrors(err.response.data));\r\n        });\r\n};\r\n// Login User\r\nexport const login = (payload) => (dispatch) => {\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    };\r\n\r\n    // Request body\r\n    const body = JSON.stringify(payload);\r\n\r\n    axios\r\n        .post(\"http://localhost:5000/users/login\", body, config)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data,\r\n            });\r\n            dispatch(clearErrors());\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n            dispatch({\r\n                type: LOGIN_FAIL,\r\n            });\r\n            if (err) dispatch(returnErrors(err.response.data));\r\n        });\r\n};\r\n// Logout User\r\nexport const logout = (type) => {\r\n    console.log(\"action\");\r\n    return {\r\n        type: LOGOUT_SUCCESS,\r\n    };\r\n};\r\n// Setup config/headers and token\r\nexport const tokenConfig = (token) => {\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\",\r\n        },\r\n    };\r\n\r\n    // If token, add to headers\r\n    if (token) {\r\n        config.headers[\"x-auth-token\"] = token;\r\n    }\r\n\r\n    return config;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}