{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { TODO_ADDED, TODOS_LOADED, TODO_DELETED, TODO_EDITED } from \"../actions/types\";\nexport default function (state = [], action) {\n  switch (action.type) {\n    //can come from form or server\n    case TODO_ADDED:\n      return [...state, action.payload];\n\n    case TODOS_LOADED:\n      return action.payload;\n\n    case TODO_DELETED:\n      const upDatedDelete = state.filter(todo => {\n        return todo._id != action.payload;\n      });\n      return upDatedDelete;\n\n    case TODO_EDITED:\n      const upDatedEdit = state.map(todo => {\n        if (todo._id === action.id) return todo = _objectSpread({}, todo, {}, action.payload);\n        return todo;\n      });\n      return upDatedEdit;\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}